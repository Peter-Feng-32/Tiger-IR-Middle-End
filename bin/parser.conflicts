
** Conflict (shift/reduce) in state 171.
** Token involved: EOL
** This state is reached from prog after reading:

list(EOL) START_FUNCTION nonempty_list(EOL) signature data_segment code_body END_FUNCTION

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

prog 
(?)

** In state 171, looking ahead at EOL, reducing production
** list(EOL) ->
** is permitted because of the following sub-derivation:

func prog // lookahead token appears because prog can begin with EOL
list(EOL) START_FUNCTION nonempty_list(EOL) signature data_segment code_body END_FUNCTION list(EOL) // lookahead token is inherited
                                                                                          . 

** In state 171, looking ahead at EOL, shifting is permitted
** because of the following sub-derivation:

func prog 
list(EOL) START_FUNCTION nonempty_list(EOL) signature data_segment code_body END_FUNCTION list(EOL) 
                                                                                          . EOL list(EOL) 

** Conflict (shift/reduce) in state 1.
** Token involved: EOL
** This state is reached from prog after reading:

list(EOL) START_FUNCTION nonempty_list(EOL) signature data_segment code_body END_FUNCTION EOL

** The derivations that appear below have the following common factor:
** (The question mark symbol (?) represents the spot where the derivations begin to differ.)

prog 
(?)

** In state 1, looking ahead at EOL, reducing production
** list(EOL) ->
** is permitted because of the following sub-derivation:

func prog // lookahead token appears because prog can begin with EOL
list(EOL) START_FUNCTION nonempty_list(EOL) signature data_segment code_body END_FUNCTION list(EOL) // lookahead token is inherited
                                                                                          EOL list(EOL) // lookahead token is inherited
                                                                                              . 

** In state 1, looking ahead at EOL, shifting is permitted
** because of the following sub-derivation:

func prog 
list(EOL) START_FUNCTION nonempty_list(EOL) signature data_segment code_body END_FUNCTION list(EOL) 
                                                                                          EOL list(EOL) 
                                                                                              . EOL list(EOL) 
